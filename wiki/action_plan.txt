Задачи:

0. Инициализация параметров среды
1. Создание и сохранение датасета с нуля
2. Визуализация датасета
2.5 Формирование train, valid, test датасета из готового датасета с несбалансированными классами
3. Создание и сохранение необученной модели с нуля
4. Обучение модели:
 1. загрузка готового датасета
 2. загрузка модели
 3. загрузка или создание оптимайзера
5. Тестирование модели (на готовом датасете)
6. Визуализация модели
7. Визуализация процесса обучения и метрик

под задача Вычисление модели


Задача:
	- тип
	- параметры

Дерево действий:

1. Настройка параметров (о):
	устройство работы (девайс)
	установка seed
	логгер

2. Трансформация (не):
	! Главная задача создания data_transform и target_transform
	
	Взависимости какие данные получаем на вход ?
	

3. Данные (о):
	! Главная задача получение объекта Dataset
	
	- формирование по root_path, где лежат файлы (в зависимости от типа файлов). 
	Задачи:
	1. Cоздать в init атрибуты: data (могут быть несколько признаков), target, data_transform (имеет для каждого признака), target_transform
	2. __getitem__ возвращает пару data[idx], target[idx]
	
	- формирование по .pt
	Задачи:
	1. Загрузить объект с помощью torch.load().
	2. Создать словарик с data и target и передать его в init.
	3. __getitem__ возвращает пару data[idx], target[idx]
	
4. Сохрание объекта датасета (не) +
	! Сохрание датасета
	
	- передаем объект и параметры для сохранения
	
5. Даталоадер (о) +
	! Создание даталоадера
	
	- передаем объект Dataset и параметры сохранения
	
6. Модель (о)
	! Главная задача получение объекта Module.
	
	Есть два типа моделей: train и inference
	
	train:	
		- создание модели из структуры в yml
		- восоздание модели из сохраненого состояния:
			1. нужны объекты классов модели и оптимайзер
			2. загружаем состояние модели и оптимайзер и другие параметры (ошибка, метрики)
	inference:
		два типа onnx и pth
		onnx:
			- создание InferenceSession и передача параметров (путь и тп)
		pth:
			- загрузка с помощью torch.load()
			
7. Сохранение модели (не) +
	! Сохранение модели
	
	Есть три вида сохранения: onnx, inference, state
	
	onnx:
		export_model_onnx:
			model,
			input_tensor_size,
			path,
			export_params
	
	inference:
		model,
		path,
		save_params
		
	state:
		сохранение состояние модели и оптимайзер и другие параметры (ошибка, метрики)
		
8. Функция ошибки (о) +
	! Создание criterion
	
	Могут быть несколько типов (обращать внимание на метки)
	
	Параметры: тип и параметры 
	
9. Обучение (о) +
	! Обучить модель
	
	Тип: с учителем, без учителя, подкреплением (в разработке с учителем)
	
	Параметры:
		модель,
		данные в виде датасета(обучающая, валидационная)
		оптимизатор,
		ф-я ошибки,
		девайс,
		class_weights
		параметры сохранения
		
	После каждой эпохи сохранение всех параметров кроме (пути и ф-и ошибки)
	
	
10. Вычисление (о)
	! Вычисление выхода работы модели
	
	pth и onnx модели
	
11. Тестирование (о) +
	! Тестирование модели на выборке
	
	Параметры:
		модель,
		даталоадер,
		девайс,
		метрики

12. Визуализация
	! Визуализация процессов и характеристик
	
	Типы: данные, метрики, модели
	
	Данные:
		- сбалансирование данных
		- 
		
	Модель:
		neuron (img)
		
	Метрики:
		- Loss
		- Accuracy
		- LR
		- Confusion Matrix
		- ROC
		- Precesion_Recall Curve
